{ pkgs
, lib
, makeWrapper
, nodejs ? pkgs.nodejs_18
}:

let
  fetchElmDeps = pkgs.callPackage ./lib/fetchElmDeps.nix { };

  # Haskell packages that require ghc 9.8
  # > "Thank you captain obvious"
  elmPkgsSet = pkgs.haskell.packages.ghc98.override {
    overrides =
      self: super:
      {
        elm = pkgs.haskell.lib.compose.overrideCabal (drv: {
          # sadly with parallelism most of the time breaks compilation
          enableParallelBuilding = false;
          preConfigure = fetchElmDeps {
            elmPackages = (import packages/elm/elm-srcs.nix);
            elmVersion = drv.version;
            registryDat = packages/elm/registry.dat;
          };
          buildTools = drv.buildTools or [ ] ++ [ makeWrapper ];
          postInstall = ''
            wrapProgram $out/bin/elm \
              --prefix PATH ':' ${lib.makeBinPath [ nodejs ]}
          '';

          description = "Delightful language for reliable webapps";
          homepage = "https://elm-lang.org/";
          license = lib.licenses.bsd3;
          maintainers = with lib.maintainers; [
            domenkozar
            turbomack
          ];
        }) (self.callPackage ./packages/elm { });

        inherit fetchElmDeps;

        ansi-wl-pprint = pkgs.haskell.lib.compose.overrideCabal (drv: {
          jailbreak = true;
        }) (self.callPackage ./packages/elm/ansi-wl-pprint { });
      };
  };

  elmToolingPkgsSet =
    pkgs.haskell.packages.ghc810.override {
      overrides =
        self: super:
        let
          inherit (pkgs.haskell.lib.compose) justStaticExecutables overrideCabal doJailbreak;
        in
          {
            elmi-to-json = justStaticExecutables (
              overrideCabal (drv: {
                version = "unstable-2021-07-19";
                src = pkgs.fetchgit {
                  url = "https://github.com/stoeffel/elmi-to-json";
                  sha256 = "0vy678k15rzpsn0aly90fb01pxsbqkgf86pa86w0gd94lka8acwl";
                  rev = "6a42376ef4b6877e130971faf964578cc096e29b";
                  fetchSubmodules = true;
                };

                prePatch = ''
                  substituteInPlace package.yaml --replace "- -Werror" ""
                  hpack
                '';
                jailbreak = true;

                description = "Tool that reads .elmi files (Elm interface file) generated by the elm compiler";
                homepage = "https://github.com/stoeffel/elmi-to-json";
                license = lib.licenses.bsd3;
                maintainers = [ lib.maintainers.turbomack ];
              }) (self.callPackage ../elmi-to-json { })
            );

            elm-instrument = justStaticExecutables (
              overrideCabal (drv: {
                version = "unstable-2020-03-16";
                src = pkgs.fetchgit {
                  url = "https://github.com/zwilias/elm-instrument";
                  sha256 = "167d7l2547zxdj7i60r6vazznd9ichwc0bqckh3vrh46glkz06jv";
                  rev = "63e15bb5ec5f812e248e61b6944189fa4a0aee4e";
                  fetchSubmodules = true;
                };
                patches = [
                  # Update code after breaking change in optparse-applicative
                  # https://github.com/zwilias/elm-instrument/pull/5
                  (pkgs.fetchpatch {
                    name = "update-optparse-applicative.patch";
                    url = "https://github.com/mdevlamynck/elm-instrument/commit/c548709d4818aeef315528e842eaf4c5b34b59b4.patch";
                    sha256 = "0ln7ik09n3r3hk7jmwwm46kz660mvxfa71120rkbbaib2falfhsc";
                  })
                ];

                prePatch = ''
                  sed "s/desc <-.*/let desc = \"${drv.version}\"/g" Setup.hs --in-place
                '';
                jailbreak = true;
                # Tests are failing because of missing instances for Eq and Show type classes
                doCheck = false;

                description = "Instrument Elm code as a preprocessing step for elm-coverage";
                homepage = "https://github.com/zwilias/elm-instrument";
                license = lib.licenses.bsd3;
                maintainers = [ lib.maintainers.turbomack ];
              }) (self.callPackage ../elm-instrument { })
            );
            attoparsec = self.attoparsec_0_13_2_5;
            aeson = doJailbreak self.aeson_1_5_6_0;
            indents = self.callPackage ../indents { };
            elm-format = null;
          };
    }

  # Haskell packages that require ghc 9.2
  elmFormatPkgsSet =
    pkgs.haskell.packages.ghc98.override {
      overrides =
        self: super:
        let
          inherit (pkgs.haskell.lib.compose) justStaticExecutables overrideCabal doJailbreak;

          fixHaddock = overrideCabal (_: {
            configureFlags = [ "--ghc-option=-Wno-error=unused-packages" ];
            doHaddock = false;
          });
        in
          {
            /*
            The elm-format expression is updated via a script in the https://github.com/avh4/elm-format repo:
            `package/nix/build.sh`
          */
            elm-format = justStaticExecutables (
              overrideCabal (drv: {
                jailbreak = true;
                doHaddock = false;
                postPatch = ''
                  mkdir -p ./generated
                  cat <<EOHS > ./generated/Build_elm_format.hs
                  module Build_elm_format where
                  gitDescribe :: String
                  gitDescribe = "${drv.version}"
                  EOHS
                '';

                description = "Formats Elm source code according to a standard set of rules based on the official Elm Style Guide";
                homepage = "https://github.com/avh4/elm-format";
                license = lib.licenses.bsd3;
                maintainers = with lib.maintainers; [
                  avh4
                  turbomack
                ];
              }) (self.callPackage ../elm-format/elm-format.nix { })
            );

            # Needed for elm-format
            avh4-lib = fixHaddock (doJailbreak (self.callPackage ../elm-format/avh4-lib.nix { }));
            elm-format-lib = fixHaddock (doJailbreak (self.callPackage ../elm-format/elm-format-lib.nix { }));
            elm-format-test-lib = fixHaddock (self.callPackage ../elm-format/elm-format-test-lib.nix { });
            elm-format-markdown = fixHaddock (self.callPackage ../elm-format/elm-format-markdown.nix { });
            # elm-format requires text >= 2.0
            text = doJailbreak self.text_2_0_2;
            # unorderd-container's tests indirectly depend on text < 2.0
            unordered-containers = overrideCabal (drv: { doCheck = false; }) super.unordered-containers;
            # relude-1.1.0.0's tests depend on hedgehog < 1.2, which indirectly depends on text < 2.0
            relude = overrideCabal (drv: { doCheck = false; }) super.relude;
          };
    }

  # Patched, originally npm-downloaded, packages
  patchedNodePkgs = import ./packages/node { inherit pkgs lib nodejs makeWrapper; };

  assembleScope = self: basics:
    {
      inherit (elmPkgsSet) elm;
      inherit (elmFormatPkgsSet) elm-format;
      inherit (elmToolingPkgsSet) elm-instrument elmi-to-json;
    } // (patchedNodePkgs self) // basics;
in
lib.makeScope pkgs.newScope
  (self: assembleScope self
    (with self; {
      inherit fetchElmDeps nodejs;

      /* Node/NPM based dependencies can be upgraded using script `packages/generate-node-packages.sh`.

        * Packages which rely on `bin-wrap` will fail by default
          and can be patched using `patchBinwrap` function defined in `packages/lib.nix`.

        * Packages which depend on npm installation of elm can be patched using
          `patchNpmElm` function also defined in `packages/lib.nix`.
      */
      elmLib =
        let
          hsElmPkgs = hs810Pkgs // self;
        in
        import ./lib {
          inherit lib;
          inherit (pkgs) writeScriptBin stdenv;
          inherit (self) elm;
        };

      elm-json = callPackage ./packages/elm-json { };

      elm-test-rs = callPackage ./packages/elm-test-rs { };

      elm-test = callPackage ./packages/elm-test { };

      lamdera = callPackage ./packages/lamdera { };
    })
  )
